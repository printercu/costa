// Generated by CoffeeScript 1.6.3
(function() {
  var Args, Attributes, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  _ = require('underscore');

  Args = require('../support/args');

  module.exports = Attributes = (function(_super) {
    __extends(Attributes, _super);

    function Attributes() {
      _ref = Attributes.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Attributes.extendsWithProto().concern();

    Attributes.includedBlock = function() {};

    Attributes.ClassMethods = (function() {
      function ClassMethods() {}

      ClassMethods.prototype.exportAttrs = function() {
        return this._manageAttrs.apply(this, [true].concat(__slice.call(arguments)));
      };

      ClassMethods.prototype.protectAttrs = function() {
        return this._manageAttrs.apply(this, [false].concat(__slice.call(arguments)));
      };

      ClassMethods.prototype._manageAttrs = function() {
        var add, args, fields, options, type, types, _i, _len, _ref1, _results;
        add = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        _ref1 = Args.findOptions(args), options = _ref1[0], fields = _ref1[1];
        types = options["for"] ? _.flatten([options["for"]]) : ['default'];
        _results = [];
        for (_i = 0, _len = types.length; _i < _len; _i++) {
          type = types[_i];
          _results.push(this["_attrExported_" + type] = _.uniq(add ? this.exportedAttrs(type).concat(fields) : _.difference(this.exportedAttrs(type), fields)));
        }
        return _results;
      };

      ClassMethods.prototype.exportedAttrs = function(type) {
        if (type == null) {
          type = 'default';
        }
        if (type === 'default') {
          return this._attrExported_default || [];
        }
        return (this._attrExported_default || []).concat(this["_attrExported_" + type] || []);
      };

      return ClassMethods;

    })();

    Attributes.prototype.exportFor = function(type) {
      var attr, result, val, _i, _len, _ref1;
      result = {};
      _ref1 = this.constructor.exportedAttrs(type);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        attr = _ref1[_i];
        if (this[attr] == null) {
          continue;
        }
        result[attr] = typeof (val = this[attr]) === 'function' ? this[attr]() : val;
      }
      return result;
    };

    return Attributes;

  })(require('coffee_classkit').Module);

}).call(this);
