// Generated by CoffeeScript 1.6.3
(function() {
  var Memcached, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = Memcached = (function(_super) {
    __extends(Memcached, _super);

    function Memcached() {
      _ref = Memcached.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Memcached.extendsWithProto().concern();

    Memcached.include(require('./redis'));

    Memcached.ClassMethods = (function() {
      function ClassMethods() {}

      ClassMethods.prototype.nextId = function(callback) {
        var key,
          _this = this;
        key = this._keySeq('id');
        this.kv.incr(key, 1, function(err, value) {
          if ((err != null) || value) {
            return typeof callback === "function" ? callback(err, value) : void 0;
          }
          return _this.kv.set(key, 1, 0, function(err) {
            if (err) {
              return typeof callback === "function" ? callback(err) : void 0;
            }
            return typeof callback === "function" ? callback(null, 1) : void 0;
          });
        });
        return this;
      };

      ClassMethods.prototype.set = function(id, data, callback) {
        var key;
        key = this._key(id);
        data = JSON.stringify(data);
        this.kv.set(key, data, 0, callback);
        return this;
      };

      ClassMethods.prototype.getMulti = function(ids, callback) {
        var id, keys,
          _this = this;
        if (!ids.length) {
          return setImmediate(function() {
            return callback(null, []);
          });
        }
        keys = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ids.length; _i < _len; _i++) {
            id = ids[_i];
            _results.push(this._key(id));
          }
          return _results;
        }).call(this);
        this.kv.mget(keys, function(err, items) {
          var item, item_json, key, result, _i, _len;
          if (err) {
            return typeof callback === "function" ? callback(err) : void 0;
          }
          result = [];
          for (_i = 0, _len = keys.length; _i < _len; _i++) {
            key = keys[_i];
            item_json = items[key];
            if (item_json) {
              try {
                item = JSON.parse(item_json);
                if (typeof item !== 'object') {
                  item = null;
                }
              } catch (_error) {
                err = _error;
                return typeof callback === "function" ? callback(err) : void 0;
              }
              if (item) {
                item.__proto__ = _this.prototype;
              }
            } else {
              item = null;
            }
            result.push(item);
          }
          return typeof callback === "function" ? callback(null, result) : void 0;
        });
        return this;
      };

      return ClassMethods;

    })();

    return Memcached;

  })(require('coffee_classkit').Module);

}).call(this);
