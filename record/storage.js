// Generated by CoffeeScript 1.6.3
(function() {
  var Storage, flow, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  flow = require('flow-coffee');

  module.exports = Storage = (function(_super) {
    __extends(Storage, _super);

    function Storage() {
      _ref = Storage.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Storage.extendsWithProto().concern();

    Storage.ClassMethods = (function() {
      function ClassMethods() {}

      ClassMethods.prototype.find = function(id, callback) {
        return this.get(id, function(err, item) {
          if (!(item || (err != null))) {
            err = new Error('Not found');
            err.status = 404;
          }
          return typeof callback === "function" ? callback(err, item) : void 0;
        });
      };

      ClassMethods.prototype.update = function(id, data, callback) {
        var _this = this;
        return this.find(id, function(err, item) {
          if (err) {
            return typeof callback === "function" ? callback(err) : void 0;
          }
          return item.update(data, function(err) {
            return typeof callback === "function" ? callback(err, item) : void 0;
          });
        });
      };

      ClassMethods.prototype.create = function(data, callback) {
        var item;
        item = new this(data);
        return item.save(function(err) {
          return typeof callback === "function" ? callback(err, item) : void 0;
        });
      };

      ClassMethods.prototype.attr = function(id, attr, callback) {
        this.get(id, function(err, item) {
          if (err) {
            return typeof callback === "function" ? callback(err) : void 0;
          }
          _.extend(item, attr);
          return this.set(id, item, callback);
        });
        return this;
      };

      ClassMethods.prototype.findEach = function(options, fn, callback) {
        return this.findInBatches(options, function(batch, batch_callback) {
          return flow.exec(function() {
            var item, _i, _len, _results;
            this.expectMulti();
            _results = [];
            for (_i = 0, _len = batch.length; _i < _len; _i++) {
              item = batch[_i];
              _results.push((function(cb) {
                return fn(item, cb);
              })(this.multi()));
            }
            return _results;
          }, batch_callback);
        }, callback);
      };

      return ClassMethods;

    })();

    Storage.prototype.save = function() {
      if (this._isPersisted) {
        return this._updateRecord.apply(this, arguments);
      } else {
        return this._createRecord.apply(this, arguments);
      }
    };

    Storage.prototype._updateRecord = function(callback) {
      this.constructor.set(this.id, this.exportFor('db'), callback);
      return this;
    };

    Storage.prototype._createRecord = function(callback) {
      var done,
        _this = this;
      done = function(err) {
        if (!err) {
          this._isPersisted = true;
        }
        return callback != null ? callback.apply(this, arguments) : void 0;
      };
      if (this.id) {
        this.constructor.set(this.id, this.exportFor('db'), done);
        return this;
      }
      this.constructor.nextId(function(err, id) {
        if (err) {
          return done(err);
        }
        _this.id = id;
        return _this.constructor.set(id, _this.exportFor('db'), done);
      });
      return this;
    };

    Storage.prototype.attr = function(attr) {
      _.extend(this, attr);
      return this;
    };

    Storage.prototype.update = function(attr, callback) {
      return this.attr(attr).save(callback);
    };

    Storage.prototype.destroy = function(callback) {
      this.constructor["delete"](this.id, function(err) {
        if (!err) {
          this._isPersisted = false;
          this._isDestroyed = true;
        }
        return callback.apply(null, arguments);
      });
      return this;
    };

    Storage.prototype.reload = function(callback) {
      this.constructor.get(this.id, callback);
      return this;
    };

    Storage.prototype.transaction = function(callback) {
      this.constructor.transaction(callback);
      return this;
    };

    return Storage;

  })(require('coffee_classkit').Module);

}).call(this);
