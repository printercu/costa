// Generated by CoffeeScript 1.6.3
(function() {
  var Args, Callbacks, cs, lingo, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  cs = require('coffee-script');

  _ = require('underscore');

  lingo = require('lingo');

  Args = require('../support/args');

  module.exports = Callbacks = (function(_super) {
    var callbacks_and_methods, method, type;

    __extends(Callbacks, _super);

    function Callbacks() {
      _ref = Callbacks.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Callbacks.extendsWithProto().concern();

    Callbacks.include(require('../support/callbacks'));

    Callbacks.ClassMethods = (function() {
      function ClassMethods() {}

      ClassMethods.prototype.defineModelCallbacks = function() {
        var action, actions, options, type, _i, _j, _len, _len1, _ref1, _ref2, _results;
        _ref1 = Args.findOptions(arguments), options = _ref1[0], actions = _ref1[1];
        options = _.extend({
          only: ['before', 'after']
        }, options);
        _results = [];
        for (_i = 0, _len = actions.length; _i < _len; _i++) {
          action = actions[_i];
          _ref2 = options.only;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            type = _ref2[_j];
            this.defineCallbacks(action, type);
            this[lingo.camelcase("" + type + " " + action)] = eval(cs.compile("-> @setCallback '" + action + "', '" + type + "', arguments...", {
              bare: true
            }));
          }
          _results.push(this[lingo.camelcase("around " + action)] = this[lingo.camelcase("before " + action)]);
        }
        return _results;
      };

      return ClassMethods;

    })();

    Callbacks.includedBlock = function() {
      var method, _i, _len, _ref1, _results;
      this.defineModelCallbacks('create', 'update', 'save', 'destroy');
      _ref1 = ['save', '_createRecord', '_updateRecord', 'destroy'];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        method = _ref1[_i];
        _results.push(this.aliasMethodChain(method, 'callbacks'));
      }
      return _results;
    };

    callbacks_and_methods = {
      save: 'save',
      destroy: 'destroy',
      create: '_createRecord',
      update: '_updateRecord'
    };

    for (type in callbacks_and_methods) {
      method = callbacks_and_methods[type];
      Callbacks.prototype["" + method + "WithCallbacks"] = eval(cs.compile("(callback) ->\n  results = null\n  @runCallbacks '" + type + "',\n    (_..., flow) -> @" + method + "WithoutCallbacks (err) ->\n      results = arguments\n      flow err\n    error:  -> callback?.apply @, arguments\n    final:  -> callback?.apply @, results", {
        bare: true
      }));
    }

    return Callbacks;

  })(require('coffee_classkit').Module);

}).call(this);
