// Generated by CoffeeScript 1.6.3
(function() {
  var Format, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = Format = (function(_super) {
    __extends(Format, _super);

    function Format() {
      _ref = Format.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Format.extendsWithProto().concern();

    Format.ClassMethods = (function() {
      function ClassMethods() {}

      ClassMethods.prototype.validatesFormatOf = function() {
        return this.validatesEachSync(arguments, function(field, options) {
          var value, _ref1, _ref2;
          value = this[field];
          if (options.allowNull && (value == null)) {
            return;
          }
          if (options.allowBlank && !value) {
            return;
          }
          if (false === ((_ref1 = options["with"]) != null ? _ref1.test(value) : void 0)) {
            this.errors.add(field, options.message || 'Invalid format');
          }
          if ((_ref2 = options.without) != null ? _ref2.test(value) : void 0) {
            return this.errors.add(field, options.message || 'Invalid format');
          }
        });
      };

      return ClassMethods;

    })();

    return Format;

  })(require('coffee_classkit').Module);

}).call(this);
