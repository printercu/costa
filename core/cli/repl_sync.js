// Generated by CoffeeScript 1.6.3
(function() {
  var Fiber, Sync, debug, synchronizeObj,
    __slice = [].slice;

  Fiber = require('fibers');

  Sync = require('sync');

  debug = require('debug')('sync');

  module.exports = function(app, repl) {
    var klass, name, old_eval, _ref;
    _ref = app.models;
    for (name in _ref) {
      klass = _ref[name];
      synchronizeObj(klass);
      synchronizeObj(klass.prototype);
    }
    old_eval = repl["eval"];
    repl["eval"] = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Fiber(function() {
        return old_eval.apply(null, args);
      }).run();
    };
    console.log('*REPL is running in sync mode*');
    return repl.displayPrompt();
  };

  synchronizeObj = function(klass) {
    var desctiptor, method, method_prefix, _fn, _i, _len, _ref;
    method_prefix = typeof klass === 'function' ? "" + klass.name + "." : "" + klass.constructor.name + "::";
    _ref = Object.getOwnPropertyNames(klass);
    _fn = function(method) {
      return Object.defineProperty(klass, "" + method + "Sync", {
        value: function() {
          var _ref1;
          return (_ref1 = klass[method]).sync.apply(_ref1, [this].concat(__slice.call(arguments)));
        }
      });
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      method = _ref[_i];
      desctiptor = Object.getOwnPropertyDescriptor(klass, method);
      if (typeof desctiptor.value !== 'function') {
        continue;
      }
      if (/Sync$/.test(method)) {
        continue;
      }
      if (klass["" + method + "Sync"] != null) {
        continue;
      }
      debug("" + method_prefix + method);
      _fn(method);
    }
    if (klass.__proto__) {
      return synchronizeObj(klass.__proto__);
    }
  };

}).call(this);
