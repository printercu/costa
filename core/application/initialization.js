// Generated by CoffeeScript 1.6.3
(function() {
  var Initialization, flow, fs, lingo, path, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  flow = require('flow-coffee');

  lingo = require('lingo');

  module.exports = Initialization = (function(_super) {
    __extends(Initialization, _super);

    function Initialization() {
      _ref = Initialization.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Initialization.extendsWithProto().concern();

    Initialization.ClassMethods = (function() {
      function ClassMethods() {}

      ClassMethods.prototype.initBlocks = ['loadInitializers', 'autoload', 'initDatabase', 'initMiddleware'];

      return ClassMethods;

    })();

    Initialization.prototype.initialize = function(callback) {
      var final_cb,
        _this = this;
      final_cb = function(err) {
        return callback != null ? callback.call(_this, err) : void 0;
      };
      this.initBlocks = this.constructor.initBlocks;
      require("" + this.root + "/etc/env").call(this);
      new flow({
        context: this,
        error: final_cb,
        final: function() {
          return final_cb(null);
        },
        blocks: this.initBlocks
      })();
      return this;
    };

    Initialization.prototype.autoload = function(callback) {
      var class_name, dir, dirs, e, file, files, rel_dir, target, _i, _len;
      dirs = {
        'app/models': 'models',
        'app/controllers': 'controllers'
      };
      for (rel_dir in dirs) {
        target = dirs[rel_dir];
        dir = path.join(this.root, rel_dir);
        this[target] = {};
        files = (function() {
          try {
            return fs.readdirSync(dir);
          } catch (_error) {
            e = _error;
            return [];
          }
        })();
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (!/.(js|coffee)$/.test(file)) {
            continue;
          }
          class_name = path.basename(file, path.extname(file)).replace(/_/g, ' ');
          class_name = lingo.camelcase(class_name, true);
          this[target][class_name] = require(path.join(dir, file));
        }
      }
      return callback();
    };

    Initialization.prototype.loadInitializers = function(callback) {
      var app, dir;
      app = this;
      dir = "" + this.root + "/etc/init";
      return flow.exec(function() {
        var arg, file, func, _i, _len, _ref1, _results;
        this.expectMulti();
        _ref1 = fs.readdirSync(dir);
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          file = _ref1[_i];
          if (!/.(js|coffee)$/.test(file)) {
            continue;
          }
          func = require(path.join(dir, file));
          if (func.call == null) {
            continue;
          }
          arg = func.length ? this.multi() : null;
          _results.push(func.call(app, arg));
        }
        return _results;
      }, function(err) {
        return callback(err);
      });
    };

    Initialization.prototype.initGlobals = function(callback) {
      try {
        require("" + this.root + "/etc/globals");
      } catch (_error) {}
      return callback();
    };

    Initialization.prototype.initDatabase = function(callback) {
      return callback();
    };

    Initialization.prototype.initMiddleware = function(callback) {
      return require("" + this.root + "/etc/middleware").call(this, function(err) {
        return callback(err);
      });
    };

    return Initialization;

  })(require('coffee_classkit').Module);

}).call(this);
