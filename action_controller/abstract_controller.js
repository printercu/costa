// Generated by CoffeeScript 1.6.3
(function() {
  var AbstractController, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = AbstractController = (function(_super) {
    __extends(AbstractController, _super);

    function AbstractController() {
      _ref = AbstractController.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AbstractController.extendsWithProto();

    AbstractController.abstract = true;

    Object.defineProperty(AbstractController, 'actionMethods', {
      get: function() {
        return this.hasOwnProperty('_actionMethods') && this._actionMethods || this.reloadActionMethods();
      }
    });

    AbstractController.reloadActionMethods = function() {
      var klass, methods;
      klass = this;
      return this._actionMethods = [].concat.apply([], (function() {
        var _ref1, _results;
        _results = [];
        while (klass && !(klass.hasOwnProperty('abstract') && klass.abstract)) {
          methods = Object.keys(klass.prototype);
          klass = (_ref1 = klass.__super__) != null ? _ref1.constructor : void 0;
          _results.push(methods);
        }
        return _results;
      })()).map(function(m) {
        var _ref1;
        return (_ref1 = m.match(/^(.+)Action$/)) != null ? _ref1[1] : void 0;
      }).filter(function(m) {
        return m;
      });
    };

    AbstractController.prototype.process = function(action, callback) {
      this.actionName = action;
      this.next = callback;
      return this._processAction();
    };

    AbstractController.prototype._processAction = function() {
      this["" + this.actionName + "Action"](this.next);
      return this;
    };

    AbstractController.prototype.handleErrors = function(fn) {
      var controller;
      controller = this;
      return function(err) {
        if (err) {
          return controller.next(err);
        }
        return fn.apply(this, arguments);
      };
    };

    return AbstractController;

  })(require('coffee_classkit').Module);

}).call(this);
