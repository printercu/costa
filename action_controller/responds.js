// Generated by CoffeeScript 1.6.3
(function() {
  var Args, Responder, Responds, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Args = require('../support/args');

  Responder = require('./responder');

  module.exports = Responds = (function(_super) {
    __extends(Responds, _super);

    function Responds() {
      _ref = Responds.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Responds.extendsWithProto().concern();

    Responds.includedBlock = function() {
      this.classAttribute('responder', '_respondToMimes');
      this.responder = Responder;
      return this.clearRespondTo();
    };

    Responds.ClassMethods = (function() {
      function ClassMethods() {}

      ClassMethods.prototype.respondTo = function() {
        var mime, mimes, options, _i, _len, _ref1;
        _ref1 = Args.findOptions(arguments), options = _ref1[0], mimes = _ref1[1];
        for (_i = 0, _len = mimes.length; _i < _len; _i++) {
          mime = mimes[_i];
          this._respondToMimes[mime] = true;
        }
        return this;
      };

      ClassMethods.prototype.clearRespondTo = function() {
        this._respondToMimes = {};
        return this;
      };

      return ClassMethods;

    })();

    Responds.prototype.respondTo = function(mimes, callback) {
      var fn;
      if (callback == null) {
        callback = this.next;
      }
      fn = mimes[this._formatFromRequest] || mimes["default"];
      if (fn) {
        fn.call(this, callback);
      } else {
        callback(406);
      }
      return this;
    };

    Responds.prototype.respondWith = function(resources, options, callback) {
      var responder;
      if (!Array.isArray(resources)) {
        resources = [resources];
      }
      if (typeof options === 'function') {
        callback = options;
        options = {};
      } else {
        if (callback == null) {
          callback = this.next;
        }
      }
      responder = options.responder || this.responder;
      new responder(this, resources, options).respond(callback);
      return this;
    };

    Object.defineProperty('_formatFromRequest', {
      get: function() {
        var accept, format, _ref1, _ref2, _ref3;
        format = ((_ref1 = this.request.params) != null ? _ref1.format : void 0) || ((_ref2 = this.request.body) != null ? _ref2._format : void 0) || ((_ref3 = this.request.query) != null ? _ref3._format : void 0);
        accept = this.request.header('accept');
        if (accept && 0 <= accept.indexOf('json')) {
          format = 'json';
        }
        return format || (format = 'html');
      }
    });

    return Responds;

  })(require('coffee_classkit').Module);

}).call(this);
