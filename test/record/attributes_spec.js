// Generated by CoffeeScript 1.6.3
(function() {
  var Attributes, assert, classkit,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  assert = require('assert');

  classkit = require('coffee_classkit');

  Attributes = require('../../record/attributes');

  describe('Attributes', function() {
    beforeEach(function() {
      var _ref, _ref1;
      this.Parent = (function(_super) {
        __extends(Parent, _super);

        function Parent() {
          _ref = Parent.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        Parent.extendsWithProto();

        Parent.include(Attributes);

        return Parent;

      })(classkit.Module);
      return this.Child = (function(_super) {
        __extends(Child, _super);

        function Child() {
          _ref1 = Child.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        Child.extendsWithProto();

        return Child;

      })(this.Parent);
    });
    return describe('exportAttrs', function() {
      context('when no _for_ option given', function() {
        beforeEach(function() {
          var _ref;
          this.attrs = ['attr1', 'attr2'];
          return (_ref = this.Parent).exportAttrs.apply(_ref, this.attrs);
        });
        it('adds attrs for default export', function() {
          return assert.deepEqual(this.Parent.exportedAttrs(), this.attrs);
        });
        it('adds attrs for all expotrs', function() {
          return assert.deepEqual(this.Parent.exportedAttrs('api'), this.attrs);
        });
        it('adds inherited attrs for default export', function() {
          return assert.deepEqual(this.Child.exportedAttrs(), this.attrs);
        });
        it('adds inherited attrs for all expotrs', function() {
          return assert.deepEqual(this.Child.exportedAttrs('api'), this.attrs);
        });
        it('does not add attrs to parent', function() {
          this.Child.exportAttrs('attr3');
          assert.deepEqual(this.Parent.exportedAttrs(), this.attrs);
          return assert.deepEqual(this.Child.exportedAttrs(), this.attrs.concat(['attr3']));
        });
        return it('allows add parent`s attrs after added child`s', null, function() {
          this.Child.exportAttrs('child');
          this.Parent.exportAttrs('parent');
          assert.deepEqual(this.Parent.exportedAttrs(), this.attrs.concat(['parent']));
          return assert.deepEqual(this.Child.exportedAttrs(), this.attrs.concat(['child', 'parent']));
        });
      });
      return context('when _for_ option is given', function() {});
    });
  });

}).call(this);
