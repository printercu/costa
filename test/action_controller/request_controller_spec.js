// Generated by CoffeeScript 1.6.3
(function() {
  var RequestController, assert,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  assert = require('assert');

  RequestController = require('../../action_controller/request_controller');

  describe('RequestController', function() {
    return describe('.dispatch', function() {
      beforeEach(function() {
        return this.TestController = (function(_super) {
          __extends(TestController, _super);

          TestController.extendsWithProto();

          function TestController() {
            TestController.__super__.constructor.apply(this, arguments);
            this.runs = [];
          }

          TestController.prototype.indexAction = function(callback) {
            this.runs.push('index');
            return setImmediate(function() {
              return typeof callback === "function" ? callback() : void 0;
            });
          };

          return TestController;

        })(RequestController);
      });
      it('sets req, res, action & next properties', function(done) {
        var controller, next;
        this.TestController.prototype.indexAction = function(callback) {
          assert.equal(this.actionName, 'index');
          assert.equal(this.request, 'req');
          assert.equal(this.response, 'res');
          this.runs.push('index');
          return setImmediate(callback);
        };
        return controller = this.TestController.dispatch('index', 'req', 'res', next = function() {
          return done(assert.deepEqual(controller.runs, ['index']));
        });
      });
      it('returns created controller instance', function() {
        var _ref;
        return assert(((_ref = this.TestController.dispatch('index')) != null ? _ref.constructor : void 0) === this.TestController);
      });
      it('runs action method', function(done) {
        var controller;
        return controller = this.TestController.dispatch('index', {}, {}, function(err) {
          assert.equal(err, null);
          assert.deepEqual(controller.runs, ['index']);
          return done();
        });
      });
      return context('if controller does not have requested action', function() {
        it('passes error to callback', function(done) {
          return this.TestController.dispatch('missing', {}, {}, function(err) {
            assert(err);
            return done();
          });
        });
        return it('returns `false`', function() {
          return assert.equal(this.TestController.dispatch('missing'), false);
        });
      });
    });
  });

}).call(this);
