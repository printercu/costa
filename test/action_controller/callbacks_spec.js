// Generated by CoffeeScript 1.6.3
(function() {
  var ActionController, assert,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  assert = require('assert');

  ActionController = require('../../action_controller');

  describe('ActionController', function() {
    return describe('#process', function() {
      beforeEach(function() {
        var _ref;
        this.TestController = (function(_super) {
          __extends(TestController, _super);

          function TestController() {
            _ref = TestController.__super__.constructor.apply(this, arguments);
            return _ref;
          }

          TestController.extendsWithProto();

          TestController.prototype.indexAction = function(callback) {
            this.runs.push('index');
            return callback();
          };

          return TestController;

        })(ActionController);
        this.controller = new this.TestController;
        this.controller.action = 'index';
        return this.controller.runs = [];
      });
      it('runs before-callbacks', function(done) {
        var _this = this;
        this.TestController.beforeFilter(function(callback) {
          this.runs.push('before');
          return callback();
        });
        return this.controller.process('index', function() {
          assert.deepEqual(_this.controller.runs, ['before', 'index']);
          return done();
        });
      });
      it('runs after-callbacks', function(done) {
        this.TestController.afterFilter(function(callback) {
          assert.deepEqual(this.runs, ['index']);
          return done();
        });
        return this.controller.process('index', function(callback) {
          throw new Error('Should not run this callback');
        });
      });
      it('runs all callbacks', function(done) {
        this.TestController.beforeFilter(function(callback) {
          this.runs.push('before');
          return callback();
        });
        this.TestController.afterFilter(function(callback) {
          this.runs.push('after');
          return callback();
        });
        this.TestController.aroundFilter(function(callback) {
          this.runs.push('around_before');
          setImmediate(function() {
            return callback();
          });
          return callback.after(function(callback) {
            this.runs.push('around_after');
            return callback();
          });
        });
        return this.controller.process('index', function() {
          assert.deepEqual(this.runs, ['before', 'around_before', 'index', 'after', 'around_after']);
          return done();
        });
      });
      describe('when method filters are given', function() {
        beforeEach(function() {
          return this.TestController.prototype.showAction = function(callback) {
            this.runs.push('show');
            return callback();
          };
        });
        it('does not run callbacks if method is in `except` option', function(done) {
          this.TestController.beforeFilter({
            except: 'index'
          }, function(callback) {
            this.runs.push('before');
            return callback();
          });
          return this.controller.process('index', function() {
            assert.deepEqual(this.runs, ['index']);
            this.runs = [];
            this.action = 'show';
            return this.process('show', function() {
              assert.deepEqual(this.runs, ['before', 'show']);
              return done();
            });
          });
        });
        return it('runs only for methods in `only` option', function(done) {
          this.TestController.beforeFilter({
            only: 'index'
          }, function(callback) {
            this.runs.push('before');
            return callback();
          });
          return this.controller.process('index', function() {
            assert.deepEqual(this.runs, ['before', 'index']);
            this.runs = [];
            this.action = 'show';
            return this.process('show', function() {
              assert.deepEqual(this.runs, ['show']);
              return done();
            });
          });
        });
      });
      return describe('in case of inheritance', function() {
        return beforeEach(function() {
          var Child;
          TestController.beforeFilter;
          return Child = (function() {
            function Child() {}

            return Child;

          })();
        });
      });
    });
  });

}).call(this);
