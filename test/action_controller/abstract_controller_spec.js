// Generated by CoffeeScript 1.6.3
(function() {
  var AbstractController, assert,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  assert = require('assert');

  AbstractController = require('../../action_controller/abstract_controller');

  describe('AbstractController', function() {
    return describe('#process', function() {
      beforeEach(function() {
        var _ref;
        this.TestController = (function(_super) {
          __extends(TestController, _super);

          function TestController() {
            _ref = TestController.__super__.constructor.apply(this, arguments);
            return _ref;
          }

          TestController.extendsWithProto();

          TestController.prototype.indexAction = function(callback) {
            this.runs.push('index');
            return typeof callback === "function" ? callback() : void 0;
          };

          return TestController;

        })(AbstractController);
        this.controller = new this.TestController;
        return this.controller.runs = [];
      });
      it('returns instance', function() {
        return assert.equal(this.controller.process('index'), this.controller);
      });
      return it('runs action method', function(done) {
        var _this = this;
        return this.controller.process('index', function(err) {
          assert.equal(err, null);
          assert.deepEqual(_this.controller.runs, ['index']);
          return done();
        });
      });
    });
  });

}).call(this);
