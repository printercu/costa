// Generated by CoffeeScript 1.6.3
(function() {
  var Callbacks, assert, classkit,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  assert = require('assert');

  classkit = require('coffee_classkit');

  Callbacks = require('../../support/callbacks');

  describe('Callbacks', function() {
    beforeEach(function() {
      return this.Parent = (function(_super) {
        __extends(Parent, _super);

        Parent.include(Callbacks);

        Parent.defineCallbacks('test');

        function Parent(runs) {
          this.runs = runs != null ? runs : [];
        }

        Parent.prototype.test = function(callback) {
          this.runs.push('test');
          return callback(null);
        };

        return Parent;

      })(classkit.Module);
    });
    describe('.runCallbacks', function() {
      it('runs before-callbacks', function(done) {
        this.Parent.setCallback('test', 'before', function(err, callback) {
          this.runs.push('before');
          return callback(null);
        });
        this.Parent.setCallback('test', 'before', function(err, callback) {
          this.runs.push('before2');
          return callback(null);
        });
        return new this.Parent().runCallbacks('test', function() {
          assert.deepEqual(this.runs, ['before', 'before2']);
          return done();
        });
      });
      return it('runs after-callbacks', function(done) {
        this.Parent.setCallback('test', 'after', function(err, callback) {
          this.runs.push('after');
          return callback(null);
        });
        this.Parent.setCallback('test', 'after', function(err, callback) {
          this.runs.push('after2');
          return callback(null);
        });
        return new this.Parent().runCallbacks('test', function(err, callback) {
          return this.test(callback);
        }, {
          final: function(err) {
            assert.deepEqual(this.runs, ['test', 'after', 'after2']);
            return done();
          }
        });
      });
    });
    describe('.skipCallback', function() {
      return it('skips callback', function(done) {
        var before2;
        this.Parent.setCallback('test', 'before', function(err, callback) {
          this.runs.push('before');
          return callback();
        });
        this.Parent.setCallback('test', 'before', before2 = function(err, callback) {
          this.runs.push('before2');
          return callback();
        });
        this.Parent.skipCallback('test', 'before', before2);
        return new this.Parent().runCallbacks('test', function() {
          assert.deepEqual(this.runs, ['before']);
          return done();
        });
      });
    });
    describe('when options are given', function() {
      it('passes `error` & `final` through to flow', function(done) {
        var error_callback, final_callback;
        error_callback = 'error_method';
        final_callback = 'final_method';
        return new this.Parent().runCallbacks('test', function(callback) {
          assert.equal(callback.options.error, error_callback);
          assert.equal(callback.options.final, final_callback);
          return done();
        }, {
          error: error_callback,
          final: final_callback
        });
      });
      it('sets `final` to options value if not-object is given', function(done) {
        return new this.Parent().runCallbacks('test', function(callback) {
          return callback();
        }, function(err, callback) {
          return done(assert.equal(err, null));
        });
      });
      return it('sets `error` to options value if not-object is given', function(done) {
        return new this.Parent().runCallbacks('test', function(callback) {
          return callback('err');
        }, function(err, callback) {
          return done(assert.equal(err, 'err'));
        });
      });
    });
    return describe('when conditions are given', function() {
      beforeEach(function() {
        this.Parent.prototype.condition = function() {
          this.runs.push('condition');
          return true;
        };
        return this.Parent.prototype.condition2 = function() {
          this.runs.push('condition2');
          return false;
        };
      });
      describe('`if`', function() {
        return it('evaluates conditions in the instance context', function(done) {
          this.Parent.setCallback('test', 'before', {
            "if": '@condition()'
          }, function(err, callback) {
            this.runs.push('before');
            return callback();
          });
          this.Parent.setCallback('test', 'before', {
            "if": '@condition2()'
          }, function(err, callback) {
            this.runs.push('before2');
            return callback();
          });
          return new this.Parent().runCallbacks('test', function() {
            assert.deepEqual(this.runs, ['condition', 'before', 'condition2']);
            return done();
          });
        });
      });
      describe('`unless`', function() {
        return it('evaluates conditions in the instance context', function(done) {
          this.Parent.setCallback('test', 'before', {
            unless: '@condition()'
          }, function(err, callback) {
            this.runs.push('before');
            return callback();
          });
          this.Parent.setCallback('test', 'before', {
            unless: '@condition2()'
          }, function(err, callback) {
            this.runs.push('before2');
            return callback();
          });
          return new this.Parent().runCallbacks('test', function() {
            assert.deepEqual(this.runs, ['condition', 'condition2', 'before2']);
            return done();
          });
        });
      });
      return describe('.skipCallback', function() {
        beforeEach(function() {
          this.Parent.setCallback('test', 'before', {
            "if": '@condition()'
          }, this.before = function(err, callback) {
            this.runs.push('before');
            return callback(null);
          });
          return this.Parent.setCallback('test', 'before', {
            unless: '@condition2()'
          }, this.before2 = function(err, callback) {
            this.runs.push('before2');
            return callback(null);
          });
        });
        it('does not skip on false conditions', function(done) {
          this.Parent.skipCallback('test', 'before', this.before, {
            "if": 'false'
          });
          this.Parent.skipCallback('test', 'before', this.before2, {
            unless: '@condition()'
          });
          return new this.Parent().runCallbacks('test', function() {
            assert.deepEqual(this.runs, ['condition', 'before', 'condition', 'condition2', 'before2']);
            return done();
          });
        });
        return it('skips on truly conditions', function(done) {
          this.Parent.skipCallback('test', 'before', this.before, {
            "if": 'true'
          });
          this.Parent.skipCallback('test', 'before', this.before2, {
            unless: '@condition2()'
          });
          return new this.Parent().runCallbacks('test', function() {
            assert.deepEqual(this.runs, ['condition', 'condition2']);
            return done();
          });
        });
      });
    });
  });

}).call(this);
