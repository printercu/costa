// Generated by CoffeeScript 1.6.3
(function() {
  var DescendantsTracker, assert, shared_specs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  assert = require('assert');

  DescendantsTracker = require('../../support/descendants_tracker');

  shared_specs = function() {
    describe('#directDescendants', function() {
      return it('tracks direct descendants', function() {
        assert.deepEqual(this.Parent.directDescendants, [this.Child1, this.Child2]);
        assert.deepEqual(this.Child1.directDescendants, [this.GrandChild1]);
        return assert.deepEqual(this.Child2.directDescendants, [this.GrandChild2]);
      });
    });
    return describe('#descendants', function() {
      return it('tracks all descendants', function() {
        assert.deepEqual(this.Parent.descendants, [this.Child1, this.Child2, this.GrandChild1, this.GrandChild2]);
        assert.deepEqual(this.Child1.descendants, [this.GrandChild1]);
        return assert.deepEqual(this.Child2.descendants, [this.GrandChild2]);
      });
    });
  };

  describe('DescendantsTracker', function() {
    context('in simple case', function() {
      before(function() {
        var _ref, _ref1, _ref2, _ref3, _ref4;
        this.Parent = (function(_super) {
          __extends(Parent, _super);

          function Parent() {
            _ref = Parent.__super__.constructor.apply(this, arguments);
            return _ref;
          }

          Parent.extendsWithProto().extend(DescendantsTracker);

          return Parent;

        })(require('coffee_classkit').Module);
        this.Child1 = (function(_super) {
          __extends(Child1, _super);

          function Child1() {
            _ref1 = Child1.__super__.constructor.apply(this, arguments);
            return _ref1;
          }

          Child1.extendsWithProto();

          return Child1;

        })(this.Parent);
        this.Child2 = (function(_super) {
          __extends(Child2, _super);

          function Child2() {
            _ref2 = Child2.__super__.constructor.apply(this, arguments);
            return _ref2;
          }

          Child2.extendsWithProto();

          return Child2;

        })(this.Parent);
        this.GrandChild1 = (function(_super) {
          __extends(GrandChild1, _super);

          function GrandChild1() {
            _ref3 = GrandChild1.__super__.constructor.apply(this, arguments);
            return _ref3;
          }

          GrandChild1.extendsWithProto();

          return GrandChild1;

        })(this.Child1);
        return this.GrandChild2 = (function(_super) {
          __extends(GrandChild2, _super);

          function GrandChild2() {
            _ref4 = GrandChild2.__super__.constructor.apply(this, arguments);
            return _ref4;
          }

          GrandChild2.extendsWithProto();

          return GrandChild2;

        })(this.Child2);
      });
      return shared_specs();
    });
    return context('with custom `inherited` hook', function() {
      before(function() {
        var Base, hooks, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        this.hooks = hooks = [];
        Base = (function(_super) {
          __extends(Base, _super);

          function Base() {
            _ref = Base.__super__.constructor.apply(this, arguments);
            return _ref;
          }

          Base.extendsWithProto();

          Base.inherited = function(klass) {
            return hooks.push("base: " + klass.name);
          };

          return Base;

        })(require('coffee_classkit').Module);
        this.Parent = (function(_super) {
          __extends(Parent, _super);

          function Parent() {
            _ref1 = Parent.__super__.constructor.apply(this, arguments);
            return _ref1;
          }

          Parent.extendsWithProto().extend(DescendantsTracker);

          Parent.inherited = function(klass) {
            hooks.push("parent: " + klass.name);
            this.trackDescendant(klass);
            return Parent.__super__.constructor.inherited.apply(this, arguments);
          };

          return Parent;

        })(Base);
        this.Child1 = (function(_super) {
          __extends(Child1, _super);

          function Child1() {
            _ref2 = Child1.__super__.constructor.apply(this, arguments);
            return _ref2;
          }

          Child1.extendsWithProto();

          Child1.inherited = function(klass) {
            hooks.push("child: " + klass.name);
            return Child1.__super__.constructor.inherited.apply(this, arguments);
          };

          return Child1;

        })(this.Parent);
        this.Child2 = (function(_super) {
          __extends(Child2, _super);

          function Child2() {
            _ref3 = Child2.__super__.constructor.apply(this, arguments);
            return _ref3;
          }

          Child2.extendsWithProto();

          return Child2;

        })(this.Parent);
        this.GrandChild1 = (function(_super) {
          __extends(GrandChild1, _super);

          function GrandChild1() {
            _ref4 = GrandChild1.__super__.constructor.apply(this, arguments);
            return _ref4;
          }

          GrandChild1.extendsWithProto();

          return GrandChild1;

        })(this.Child1);
        return this.GrandChild2 = (function(_super) {
          __extends(GrandChild2, _super);

          function GrandChild2() {
            _ref5 = GrandChild2.__super__.constructor.apply(this, arguments);
            return _ref5;
          }

          GrandChild2.extendsWithProto();

          return GrandChild2;

        })(this.Child2);
      });
      shared_specs();
      return it('runs all hooks', function() {
        return assert.deepEqual(this.hooks, ['base: Parent', 'parent: Child1', 'base: Child1', 'parent: Child2', 'base: Child2', 'child: GrandChild1', 'parent: GrandChild1', 'base: GrandChild1', 'parent: GrandChild2', 'base: GrandChild2']);
      });
    });
  });

}).call(this);
