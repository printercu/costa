// Generated by CoffeeScript 1.6.3
(function() {
  var Args, assert;

  assert = require('assert');

  Args = require('../../support/args');

  describe('Arguments', function() {
    return describe('#findOptions', function() {
      var opts, subject, val1, val2, val3;
      opts = {
        opts: 'opts'
      };
      val1 = 'val1';
      val2 = 'val2';
      val3 = {
        val: 'val'
      };
      subject = Args.findOptions;
      it('returns [{}, []] if nothing is given', function() {
        return assert.deepEqual(subject(), [{}, []]);
      });
      it('returns [{}, []] if empty array is given', function() {
        return assert.deepEqual(subject([]), [{}, []]);
      });
      it('works if input array has one element', function() {
        assert.deepEqual(subject([opts]), [opts, []]);
        return assert.deepEqual(subject([val1]), [{}, [val1]]);
      });
      it('works if input array has two elements', function() {
        assert.deepEqual(subject([opts, val1]), [opts, [val1]]);
        assert.deepEqual(subject([val1, opts]), [opts, [val1]]);
        return assert.deepEqual(subject([val1, val2]), [{}, [val1, val2]]);
      });
      it('works if input array has more elements', function() {
        assert.deepEqual(subject([opts, val1, val2]), [opts, [val1, val2]]);
        assert.deepEqual(subject([val1, val2, opts]), [opts, [val1, val2]]);
        return assert.deepEqual(subject([val1, val3, val2]), [{}, [val1, val3, val2]]);
      });
      it('returns last element as options if first is an object too', function() {
        return assert.deepEqual(subject([val3, val1, opts]), [opts, [val3, val1]]);
      });
      return it('works with arguments object', function() {
        var f,
          _this = this;
        f = function() {
          return subject(arguments);
        };
        assert.deepEqual(f(), [{}, []]);
        assert.deepEqual(f(opts), [opts, []]);
        assert.deepEqual(f(val1), [{}, [val1]]);
        assert.deepEqual(f(opts, val1, val2), [opts, [val1, val2]]);
        return assert.deepEqual(f(val1, val2, opts), [opts, [val1, val2]]);
      });
    });
  });

}).call(this);
